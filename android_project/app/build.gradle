apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.flutter.app"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 注意这个 ndk 配置不要放在 defaultConfig 块中!
            ndk {
                abiFilters "armeabi"
            }
        }
        profile {
            initWith debug
            ndk {
                abiFilters "armeabi"
            }
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // 通过拷贝文件的方式来解决旧项目找不到 libflutter.so 的问题
    // 这里的旧项目指那些较老的、只支持 armeabi 的项目
    afterEvaluate {
        applicationVariants.each { variant ->
            def buildTypeName = variant.buildType.name
            def hasSoFile = buildTypeName == 'release' || buildTypeName == 'profile'
            if (hasSoFile) {
                def taskPostfix = variant.name.substring(0, 1).toUpperCase() + variant.name.substring(1)
                // 当前可兼容 android gradle plugin 3.5, 其他版本未测试!
                project.task("copyFlutterSo$taskPostfix", type: Copy) {
                    print('copy so')
                    from "$buildDir/intermediates/merged_native_libs/$taskPostfix/out/lib/armeabi-v7a"
                    into "$buildDir/intermediates/merged_native_libs/$taskPostfix/out/lib/armeabi"
                    include 'libflutter.so'
                    include 'libapp.so'
                }
                project.tasks["copyFlutterSo$taskPostfix"].dependsOn(project.tasks["merge$taskPostfix" + "NativeLibs"])
                project.tasks["strip$taskPostfix" + "DebugSymbols"].dependsOn(project.tasks["copyFlutterSo$taskPostfix"])
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // add flutter to app
    // source - 源码集成
    // aar - AAR产物集成
    if (flutterMode == 'source') {
        implementation project(path: ':flutter')
    } else {
        debugImplementation 'com.example.flutter_project:flutter_debug:1.0'
        profileImplementation 'com.example.flutter_project:flutter_profile:1.0'
        releaseImplementation 'com.example.flutter_project:flutter_release:1.0'
    }
    // add flutter to app
}
